package main

import (
	"context"
	"fmt"
	"image-vuln-scanner-api/db"
	"io"
	"os"
	"time"

	// "fmt"
	// "net/http"
	// "testing"

	"github.com/testcontainers/testcontainers-go"
)

// StdoutLogConsumer is a LogConsumer that prints the log to stdout
type StdoutLogConsumer struct {
	ImageName string
	Output    string
}

type Vulnerability struct {
	ID          string  `json:"id"`
	Severity    string  `json:"severity"`
	Description string  `json:"description"`
	BaseScore   float64 `json:"baseScore"`
	FixState    string  `json:"fixState"`
}

// Accept() prints the log to stdout
func (lc *StdoutLogConsumer) Accept(l testcontainers.Log) {
	fmt.Print(string(l.Content))
	// Guardar los resultados en memoria
	lc.Output += string(l.Content)
}

func ScanImage(name string) (bool, error) {
	ctx := context.Background() // Contexto del contenedor
	g := StdoutLogConsumer{ImageName: name, Output: ""}
	fileName := randomString(10) + ".json"
	file := "/tmp/" + fileName

	req := testcontainers.ContainerRequest{
		Image: "cgr.dev/chainguard/grype:latest",
		// WaitingFor: wait.ForLog("Starting Grype API server"),
		// Cmd:        []string{name}, // Imagen a escanear. argumento opcional: --scope all-layers
		Cmd: []string{"--file", file, "--output", "json", name},
		// Cmd: []string{"--output", "json", name},
		LogConsumerCfg: &testcontainers.LogConsumerConfig{
			Consumers: []testcontainers.LogConsumer{&g},
		},
	}

	fmt.Printf("(*) Scanning image \"%s\"...\n", name)
	container, err := testcontainers.GenericContainer(ctx, testcontainers.GenericContainerRequest{
		ContainerRequest: req,
		Started:          true,
	})

	if err != nil {
		fmt.Printf("Error creating container: %v\n", err)
		return false, err
	}
	defer container.Terminate(ctx)

	// Esperar a que el contenedor termine - GO NO TIENE WHILE
	for {
		running := container.IsRunning()
		if !running {
			fmt.Printf("(*) Image \"%s\" scanned\n", name)
			break
		}
		fmt.Println("Container is running")
		time.Sleep(10 * time.Second)
	}

	// https://www.lambdatest.com/automation-testing-advisor/golang/methods/testcontainers-go_go.testcontainers.CopyFileFromContainer
	reader, _ := container.CopyFileFromContainer(ctx, file)
	defer reader.Close()

	// bytes, err := io.ReadAll(reader)
	// if err != nil {
	// 	return false, err
	// }

	// erro := ioutil.WriteFile("./"+file, bytes, 0644)
	// if erro != nil {
	// 	return false, erro
	// }

	// Guardar el archivo en la m√°quina host
	outFile, err := os.Create("./" + fileName)
	if err != nil {
		fmt.Printf("Error creating output file: %v\n", err)
		return false, err
	}
	defer outFile.Close()

	_, err = io.Copy(outFile, reader)
	if err != nil {
		fmt.Printf("Error writing to output file: %v\n", err)
		return false, err
	}

	fmt.Println("File copied successfully to host:", fileName)

	//

	return saveResults(name, g.Output), nil
}

func saveResults(name string, results string) bool {
	tx, err := db.Connection.Begin()
	db.CheckError(err)
	stmt, err := tx.Prepare("UPDATE images SET vulnerabilities = ? WHERE name = ?")
	db.CheckError(err)
	defer stmt.Close()

	_, err = stmt.Exec(results, name)
	db.CheckError(err)
	tx.Commit()
	fmt.Printf("(*) Image %s results saved on database\n", name)

	return true
}
